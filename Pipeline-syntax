A Jenkinsfile can be written using two types of syntax — Declarative and Scripted.
Declarative Pipeline is a more recent feature of Jenkins Pipeline which:
  * Provides richer syntactical features over Scripted Pipeline syntax, and
  * Is designed to make writing and reading Pipeline code easier.

Durable: Pipelines can survive both planned and unplanned restarts of the Jenkins controller, but freestyle job can't.

PIPELINE CONCEPTS ==

Pipeline - pipeline is a set of definitions that allows you to automate the processes of Continuous Integration (CI) and Continuous Delivery (CD).
Node - node represents an environment (often a machine or a container) where the steps of a pipeline can be executed.
Stage - stage is a phase or section of your overall pipeline, and within each stage, you can define multiple "steps."
Step - A single task. Fundamentally, a step tells Jenkins what to do at a particular point in time.


options {
    skipStagesAfterUnstable()
}
-----If any stage is unstable, then the stages after unstable stage is skipped.
(Unstable in jenkins means -  stage is completed but some non-critical issues are detected ---Test failures, Code quality Metrics)

A Pipeline can be created in one of the following ways:

1) Through Blue Ocean - after setting up a Pipeline project in Blue Ocean, the Blue Ocean UI helps you write your Pipeline’s Jenkinsfile and commit it to source control.
2) Through the classic UI - you can enter a basic Pipeline directly in Jenkins through the classic UI.
3) In SCM - you can write a Jenkinsfile manually, which you can commit to your project’s source control repository.

A Jenkinsfile created using the classic UI is stored by Jenkins itself (within the Jenkins home directory).

env -  The env global variable in Jenkins Pipeline provides access to environment variables, allowing you to retrieve information about the environment in which the pipeline is running.
                    def buildId = env.BUILD_ID
                    def jobName = env.JOB_NAME
                    echo "Build ID: ${buildId}, Job Name: ${jobName}"

 params -  the params global variable provides access to all the parameters defined for the pipeline. It exposes these parameters as a read-only map, allowing you to retrieve and use their 
values within your pipeline script.

pipeline {
    agent any

    stages {
        stage('Build') {
            steps {
                echo 'Building..'
            }
        }
        stage('Test') {
            steps {
                echo 'Testing..'
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying....'
            }
        }
    }
}

* Jenkinsfile is to be created in root directoy of project.
* Jenkinsfile without an agent directive, it is not capable of doing any work.
* stage diective, steps directive also required for a valid declarative pipeline.

checkout scm
* checkout - this is used to checkout code from source control.
* scm - this is a special variable which instructs the checkout step to clone the specific revision.

Jenkinsfile is not a replacement for an existing build tool such as GNU/Make, Maven, Gradle, etc, but rather can be viewed 
as a glue layer to bind the multiple phases of a project’s development lifecycle (build, test, deploy, etc) together.

pipeline {
    agent any

    stages {
        stage('Build') {
            steps {
                sh 'make'
                archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
            }
        }
    }
}

* sh 'make'
