1) creating docker image and pushing to docker hub

pipeline {
    agent any
    tools { maven 'maven' }
    stages{
        stage('Code from Git') {
            steps{
                git branch: 'main', url: 'https://github.com/alavalapatisree/Petclinic.git'
            }
        }
        stage('Docker check') {
            steps{
                sh "docker --version"
            }
        }
        stage('maven install') {
            steps{
                //sh "sudo apt install -y maven"
                sh "export DEBIAN_FRONTEND=noninteractive && sudo apt-get install -y maven"
            }
        }
        
        stage('maven build') {
            steps{
                sh "mvn clean package"
            }
        }
        stage('Docker image') {
            steps{
                script {
                    withDockerRegistry(credentialsId: '1c2a9e32-5e82-4700-a946-be16ab459a5b') {
                    sh "docker build -t pet ."
                    sh "docker tag pet alavalapatirupasree/pet:v1"
                    sh "docker push alavalapatirupasree/pet:v1"
                    }
                }
            }
        }
        //stage('Docker Container') {
            //steps{
                //sh "docker run -p 8090:8090 pet"
            //}
        //}
    }
}

2) deploying application to tomcat server using curl

pipeline {
    agent any
    tools { maven 'maven' }
    stages{
        stage('git code') {
            steps {
                git branch: 'main', url: 'https://github.com/alavalapatisree/Petclinic.git'
            }
        }
        
        stage('maven build') {
            steps{
                sh "mvn clean install"
            }
        }
        
        stage('deploy') {
            steps{
                sh "curl -v --upload-file /var/lib/jenkins/workspace/job/target/petclinic.war http://ip:8080/manager/text/deploy?path=/pet"
            }
        }
    }
}

3) deploying application to tomcat server using scp

pipeline {
    agent any
    tools { maven 'maven' }
    stages{
        stage('git code') {
            steps {
                git branch: 'main', url: 'https://github.com/alavalapatisree/Petclinic.git'
            }
        }
        
        stage('maven build') {
            steps{
                sh "mvn clean install"
            }
        }
        
        stage('deploy') {
            steps{
                sh "scp -v -i /var/lib/jenkins/.ssh/id_rsa /var/lib/jenkins/workspace/job/target/petclinic.war user@ip_address:/opt/tomcat/updated/webapps/"
                sh "scp -v -i /var/lib/jenkins/workspace/job/target/petclinic.war user@ip_address:/opt/tomcat/updated/webapps/"
                sh "scp -v -i /var/lib/jenkins/.ssh/id_rsa -o StrictHostKeyChecking=no /var/lib/jenkins/workspace/job/target/petclinic.war user@ip_address:/opt/tomcat/updated/webapps/"
            }
        }
    }
}


email notification ::
download pulgin 'Email Extension template'
to go mail which you need to send mails from > manage your google account > security > click on 2step verification > if it is off then turn on > click on App passwords > type app name(ex. smtp.gmail.com) > create > copy that password( it is show only once) -- that is your app password
manage jenkins > Credentials > Username with password > username - <mailid> alavalapatisree2014@gmail.com > password - <app password from mail> create
go to Manage jenkins> system > Extended E-mail Notification
SMTP server - smtp.gmail.com
SMTP port - 25 or 465 or 587
click on advanced > provide credentials > click use SSl and Use TLS

for testing purpose::
go to E-mail Notification 
SMTP server - smtp.gmail.com
click on advanced> click on use SMTP Authntication and Use SSL > SMTP port - 25 or 465 or 587 >(optional) Reply -To address <to which maial you want to send mail> rupasri1056@gmail.com
click on Test configuration by sending test e-mail > Test e-mail recipient (rupasri1056@gmail.com) > click on test configuration
if mail sent succesfully we can see there.


after this we need to write pipeline
pipeline {
    agent any

    stages {
        stage('Hello') {
            steps {
                echo 'Hello World'
            }
        }
    }

    post {
        success {
            emailext subject: "Jenkins Build Notification - Success",
                      body: "Jenkins build was successful.",
                      attachLog: true,
                      to: 'rupasri1056@gmail.com',
                      from: 'alavalapatisree2014@gmail.com'
        }
        unstable {
            emailext subject: "Jenkins Build Notification - Unstable",
                      body: "Jenkins build is unstable.",
                      attachLog: true,
                      to: 'rupasri1056@gmail.com',
                      from: 'alavalapatisree2014@gmail.com'
        }
        failure {
            emailext subject: "Jenkins Build Notification - Failure",
                      body: "Jenkins build has failed. Please check the console log for details.",
                      attachLog: true,
                      to: 'rupasri1056@gmail.com',
                      from: 'alavalapatisree2014@gmail.com'
        }
    }
}
